
=head1 NAME

Hustle::Table - Fast dynamic dispatching to subroutines

=head1 SYNOPSIS

  use Hustle::Table;

  #1. Create a new object
  my $table=Hustle::Table->new;

  #2. Add entries which contain:
  #	matcher:	required. The matcher  (ie regex, string, number) to test with
  #	sub:		required. The sub to call when matcher is 'true' when testing input
  #	label:		optional. For identification
  #	count:		optional. Used as priority when adding (larger number=> higher priority)
  #Can either be a array ref or hash ref

  $table->add(
  	{match=>qr/regex match/, sub=>sub{ #dispatch vector}}, 	#entry as a hash ref
	[qr/another/,sub{},"my label",10],			#entry as array ref
	[undef,sub {},"default",undef]				#undef matcher is default match all
  );

  #3. Prepare a dispatcher:
  # 	A dispatcher is sub reference, which is called directly with in put to match
  #     Different types, caching and other processing options.

  my $dispatch=$table->prepare_dispatcher(type=>"dynamic"); # or loop, loop_cached, dynamic_cached


  #4. Dispatch from input
  $dispatch->("thing to match","optional", "arguemnts");	# any number of arguments passsed to sub


  #Training is also possible please see below
  

=head1 DESCRIPTION

This module provides small class to construct a dispatch table and build a dispatcher subroutine for it. Multiple dispatchers types to choose from give the user tunable behaviour.


 
=over 

=item Uses buildin perl features  (regex, smartmatch)

=item Cached prematching (optional)

=item Basic hit count and optimising (optional)

=item Fall through/catch all matching

=back

=head2 EXPORT

No exports. Please use the object interface.



=head2 How it works

The table is essentially a list of entries, each containing:

=over

=item matcher

	regular expression, string, number

=item target

	target subroutine to call when the regex matches

=item id

	id to help track this entry

=item count

	running total on how many times an entry has been dispatched successfully

=back


The list always has one entry which is the fallback or default which is called when no other entries match.


Once the a table is created entries are added as an even numbered list of matcher=> sub pairs.

	my $table=Hustle::Table->new;

	$table->add(qr/Hello/, sub { say "There"; return;});





=head1 Performance

The concept is to perform less searching to find the dispatch vector. However the type of input does play an important role in determining the best way perform the search.

=over

=item Uniformly distributed input


For uniformly distributed input, the fastest method is to use the dynamically generated non caching 
method. Resorting or optimising search order has no real effect as the probablilty of each case is equal. In this case the method with the least run time overhead will perform the best.

Caching can have a detrimental effect as it take cpu time to consult the cache

=item 




=head1 SEE ALSO

Mention other useful documentation such as the documentation of
related modules or operating system documentation (such as man pages
in UNIX), or any relevant external documentation such as RFCs or
standards.

If you have a mailing list set up for your module, mention it here.

If you have a web site set up for your module, mention it here.

=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@sd.apple.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2021 by Ruben Westerberg

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.28.2 or,
at your option, any later version of Perl 5 you may have available.


=cut
